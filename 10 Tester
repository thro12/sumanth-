Source removal method ..

#include <stdio.h>
#include <stdlib.h>

int graph[40][40], t[40];
int bcount, top, r;

int topologicalsort(int n) {
    int u, v, stack[40], indegree[40];

    // Initialize indegree of all vertices
    for (int j = 0; j < n; j++) {
        int sum = 0;
        for (int i = 0; i < n; i++)
            sum += graph[i][j];
        indegree[j] = sum;
    }

    top = -1;
    r = 0;

    // Push all vertices with indegree 0 to stack
    for (int i = 0; i < n; i++) {
        if (indegree[i] == 0)
            stack[++top] = i;
    }

    while (top != -1) {
        u = stack[top--];
        t[r++] = u;

        // For every adjacent vertex v of u, decrease indegree by 1
        for (v = 0; v < n; v++) {
            bcount++;
            if (graph[u][v] == 1) {
                indegree[v]--;
                if (indegree[v] == 0)
                    stack[++top] = v;
            }
        }
    }

    // If the topological sort order does not include all vertices
    if (r != n) {
        printf("The graph has a cycle\nSo no topological ordering\n");
        return -1;
    }
    return 0;
}

void tester() {
    int n;
    bcount = 0;
    printf("Enter the number of vertices: \n");
    scanf("%d", &n);

    printf("Enter the adjacency matrix: \n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    int c = topologicalsort(n);
    if (c == -1) {
        return;
    }

    printf("Topological sorted order: \n");
    for (int i = 0; i < n; i++) {
        printf("%c-->", t[i] + 65);  // Convert index to corresponding ASCII letter
    }
    printf("\n");
}

void plotter(int k) {
    FILE *fp1 = fopen("tscrcb.txt", "a");
    FILE *fp2 = fopen("tsrcbw.txt", "a");
    int v;

    for (int i = 1; i <= 10; i++) {
        v = i * 4;  // Increase v for better testing

        if (k == 0) {  // Best case graph (complete graph)
            for (int i = 0; i < v; i++) {
                for (int j = 0; j < v; j++) {
                    if (i < j)
                        graph[i][j] = 1;
                    else
                        graph[i][j] = 0;
                }
            }
        } else {  // Worst case graph (linear chain)
            for (int i = 0; i < v; i++) {
                for (int j = 0; j < v; j++) {
                    graph[i][j] = 0;
                }
            }
            for (int i = 0; i < v - 1; i++) {
                graph[i][i + 1] = 1;
            }
        }

        bcount = 0;
        top = -1;
        for (int i = 0; i < 40; i++) {
            t[i] = 0;
        }

        topologicalsort(v);

        if (k == 0) {
            fprintf(fp2, "%d\t%d\n", v, bcount);
        } else {
            fprintf(fp1, "%d\t%d\n", v, bcount);
        }
    }
    fclose(fp1);
    fclose(fp2);
}

int main() {
    int key;
    for (;;) {
        printf("Enter your choice:\n1. Tester\n2. Plotter\n3. Exit\n");
        scanf("%d", &key);
        switch (key) {
            case 1:
                tester();
                break;
            case 2:
                for (int i = 0; i < 2; i++) {
                    plotter(i);
                }
                break;
            case 3:
                exit(0);
            default:
                printf("Invalid choice, please try again.\n");
                break;
        }
    }
    return 0;
}
