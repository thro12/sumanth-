#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100

int graph[MAX_NODES][MAX_NODES], visited[MAX_NODES], path[MAX_NODES];
int isCyclic = 0, dfsCount = 0, count = 0, dcount = 0;
int d;

void dfs(int n, int start, int parent) {
    visited[start] = 1;
    path[start] = 1;  // Mark the node as part of the current path
    count++;
    printf("--> %c ", start + 65);

    for (int i = 0; i < n; i++) {
        if (d == 1) { // Directed graph
            if (i != parent && graph[start][i] && visited[i] == 1 && path[i] == 1) {
                isCyclic = 1;
            }
        } else { // Undirected graph
            if (i != parent && graph[start][i] && visited[i] && path[i] == 1) {
                isCyclic = 1;
            }
        }

        if (graph[start][i] && visited[i] == 0) {
            dfs(n, i, start);
        }
    }
    path[start] = 0;  // Unmark the node as part of the current path
}

int main() {
    int n, start;

    printf("Enter the number of nodes in the graph:\n");
    scanf("%d", &n);

    // Initialize the arrays
    for (int i = 0; i < n; i++) {
        visited[i] = 0;
        path[i] = 0;
        for (int j = 0; j < n; j++) {
            graph[i][j] = 0;
        }
    }

    printf("Enter the Adjacency Matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("Enter if the graph is directed (1 for yes, 0 for no):\n");
    scanf("%d", &d);

    printf("The Adjacency Matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", graph[i][j]);
        }
        printf("\n");
    }

    isCyclic = 0;
    printf("\nDFS traversal starting from node A\n");
    dfs(n, 0, -1);
    dfsCount++;

    if (count == n) {
        printf("\nThe Graph is connected\n");
    } else {
        printf("\nThe Graph is not connected\n");
        start = 1;
        while (count != n && start < n) {
            if (visited[start] != 1) {
                printf("\n");
                dfs(n, start, -1);
                dfsCount++;
            }
            start++;
        }
    }

    printf("\nThe number of components is %d\n", dfsCount);

    if (isCyclic) {
        printf("\nThe graph is cyclic\n");
    } else {
        printf("\nThe graph is not cyclic\n");
    }

    return 0;
}
